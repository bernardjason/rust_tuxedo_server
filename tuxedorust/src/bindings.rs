/* automatically generated by rust-bindgen 0.56.0 */

#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub const TMENV_H: u32 = 1;
pub const _TMPROTOTYPES: u32 = 1;
pub const O_BINARY: u32 = 0;
pub const _SYS_TYPES_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 31;
pub const _SYS_CDEFS_H: u32 = 1;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
#[allow(non_upper_case_globals)]
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __LONG_DOUBLE_USES_FLOAT128: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const __TIMESIZE: u32 = 64;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
#[allow(non_upper_case_globals)]
pub const __clock_t_defined: u32 = 1;
#[allow(non_upper_case_globals)]
pub const __clockid_t_defined: u32 = 1;
#[allow(non_upper_case_globals)]
pub const __time_t_defined: u32 = 1;
#[allow(non_upper_case_globals)]
pub const __timer_t_defined: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const _BITS_ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const _BITS_ENDIANNESS_H: u32 = 1;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __FD_ZERO_STOS: &'static [u8; 6usize] = b"stosq\0";
#[allow(non_upper_case_globals)]
pub const __sigset_t_defined: u32 = 1;
#[allow(non_upper_case_globals)]
pub const __timeval_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const _THREAD_MUTEX_INTERNAL_H: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
#[allow(non_upper_case_globals)]
pub const __have_pthread_attr_t: u32 = 1;
pub const _TML_ENDIAN: u32 = 1;
pub const _TMPAGESIZE: u32 = 512;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _STDLIB_H: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WSTOPPED: u32 = 2;
pub const WEXITED: u32 = 4;
pub const WCONTINUED: u32 = 8;
pub const WNOWAIT: u32 = 16777216;
pub const __WNOTHREAD: u32 = 536870912;
pub const __WALL: u32 = 1073741824;
pub const __WCLONE: u32 = 2147483648;
pub const __ENUM_IDTYPE_T: u32 = 1;
pub const __W_CONTINUED: u32 = 65535;
pub const __WCOREFLAG: u32 = 128;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
#[allow(non_upper_case_globals)]
pub const __ldiv_t_defined: u32 = 1;
#[allow(non_upper_case_globals)]
pub const __lldiv_t_defined: u32 = 1;
pub const RAND_MAX: u32 = 2147483647;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const _ALLOCA_H: u32 = 1;
pub const _TMNOCRYPTHDR: u32 = 1;
pub const MAXFBLEN32: u32 = 2147483646;
pub const FSTDXINT: u32 = 16;
pub const FMAXNULLSIZE: u32 = 2660;
pub const FVIEWCACHESIZE: u32 = 128;
pub const FVIEWNAMESIZE: u32 = 33;
pub const FRECORDCACHESIZE: u32 = 128;
pub const FRECORDNAMESIZE: u32 = 33;
pub const FADD: u32 = 1;
pub const FMLMOD: u32 = 2;
pub const FDEL: u32 = 3;
pub const F_OFFSET: u32 = 1;
pub const F_SIZE: u32 = 2;
pub const F_PROP: u32 = 4;
pub const F_FTOS: u32 = 8;
pub const F_STOF: u32 = 16;
pub const F_BOTH: u32 = 24;
pub const F_OFF: u32 = 0;
pub const F_LENGTH: u32 = 32;
pub const F_COUNT: u32 = 64;
pub const F_NONE: u32 = 128;
pub const FUPDATE: u32 = 1;
pub const FCONCAT: u32 = 2;
pub const FJOIN: u32 = 3;
pub const FOJOIN: u32 = 4;
pub const FBUFENC: u32 = 1;
pub const FTERMENC: u32 = 2;
pub const FLD_SHORT: u32 = 0;
pub const FLD_LONG: u32 = 1;
pub const FLD_CHAR: u32 = 2;
pub const FLD_FLOAT: u32 = 3;
pub const FLD_DOUBLE: u32 = 4;
pub const FLD_STRING: u32 = 5;
pub const FLD_CARRAY: u32 = 6;
pub const FLD_PTR: u32 = 9;
pub const FLD_FML32: u32 = 10;
pub const FLD_VIEW32: u32 = 11;
pub const FLD_MBSTRING: u32 = 12;
pub const FLD_FML: u32 = 13;
pub const FLD_XPATH: u32 = 14;
pub const FLD_MAX: u32 = 14;
pub const FMINVAL: u32 = 0;
pub const FALIGNERR: u32 = 1;
pub const FNOTFLD: u32 = 2;
pub const FNOSPACE: u32 = 3;
pub const FNOTPRES: u32 = 4;
pub const FBADFLD: u32 = 5;
pub const FTYPERR: u32 = 6;
pub const FEUNIX: u32 = 7;
pub const FBADNAME: u32 = 8;
pub const FMALLOC: u32 = 9;
pub const FSYNTAX: u32 = 10;
pub const FFTOPEN: u32 = 11;
pub const FFTSYNTAX: u32 = 12;
pub const FEINVAL: u32 = 13;
pub const FBADTBL: u32 = 14;
pub const FBADVIEW: u32 = 15;
pub const FVFSYNTAX: u32 = 16;
pub const FVFOPEN: u32 = 17;
pub const FBADACM: u32 = 18;
pub const FNOCNAME: u32 = 19;
pub const FEBADOP: u32 = 20;
pub const FNOTRECORD: u32 = 21;
pub const FRFSYNTAX: u32 = 22;
pub const FRFOPEN: u32 = 23;
pub const FBADRECORD: u32 = 24;
pub const FMAXVAL: u32 = 25;
pub const TPXPARSNEVER: u32 = 1;
pub const TPXPARSALWAYS: u32 = 2;
pub const TPXPARSSCHFULL: u32 = 4;
pub const TPXPARSCONFATAL: u32 = 8;
pub const TPXPARSNSPACE: u32 = 16;
pub const TPXPARSDOSCH: u32 = 32;
pub const TPXPARSEREFN: u32 = 64;
pub const TPXPARSNOEXIT: u32 = 128;
pub const TPXPARSNOINCWS: u32 = 256;
pub const TPXPARSCACHESET: u32 = 512;
pub const TPXPARSCACHERESET: u32 = 1024;
pub const TPXPARSSTDURI: u32 = 2048;
pub const TPXPARSUSECACHEDGRAM: u32 = 4096;
pub const TPXMLALLOWEMPTY: u32 = 8192;
pub const MINBUFSIZE: u32 = 256;
pub const BUFSIZE: u32 = 512;
pub const BLOCKBUFSIZE: u32 = 4096;
pub const C_SHORT: u32 = 0;
pub const C_LONG: u32 = 1;
pub const C_CHAR: u32 = 2;
pub const C_FLOAT: u32 = 3;
pub const C_DOUBLE: u32 = 4;
pub const C_STRING: u32 = 5;
pub const C_CARRAY: u32 = 6;
pub const C_INT: u32 = 7;
pub const C_DECIMAL: u32 = 8;
pub const C_PTR: u32 = 9;
pub const C_FML32: u32 = 10;
pub const C_VIEW32: u32 = 11;
pub const C_MBSTRING: u32 = 12;
pub const C_FML: u32 = 13;
pub const C_BOOL: u32 = 14;
pub const C_UCHAR: u32 = 15;
pub const C_SCHAR: u32 = 16;
pub const C_WCHAR: u32 = 17;
pub const C_UINT: u32 = 18;
pub const C_ULONG: u32 = 19;
pub const C_LLONG: u32 = 20;
pub const C_ULLONG: u32 = 21;
pub const C_LDOUBLE: u32 = 22;
pub const C_USHORT: u32 = 23;
pub const C_NUMTYPE: u32 = 24;
pub const TPENC_ASCII: u32 = 1;
pub const TPENC_EBCDIC: u32 = 2;
pub const TPENC_BIG_ENDIAN: u32 = 4;
pub const TPENC_LITTLE_ENDIAN: u32 = 8;
pub const TPENC_MAINFRAME_FLOAT: u32 = 16;
pub const ROK: u32 = 0;
pub const RCONFLICTOK: u32 = 1;
pub const FVIEWFLDOVHD: u32 = 33;
pub const _STDIO_H: u32 = 1;
pub const __GNUC_VA_LIST: u32 = 1;
#[allow(non_upper_case_globals)]
pub const _____fpos_t_defined: u32 = 1;
#[allow(non_upper_case_globals)]
pub const ____mbstate_t_defined: u32 = 1;
#[allow(non_upper_case_globals)]
pub const _____fpos64_t_defined: u32 = 1;
#[allow(non_upper_case_globals)]
pub const ____FILE_defined: u32 = 1;
#[allow(non_upper_case_globals)]
pub const __FILE_defined: u32 = 1;
#[allow(non_upper_case_globals)]
pub const __struct_FILE_defined: u32 = 1;
pub const _IO_EOF_SEEN: u32 = 16;
pub const _IO_ERR_SEEN: u32 = 32;
pub const _IO_USER_LOCK: u32 = 32768;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 8192;
pub const EOF: i32 = -1;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
#[allow(non_upper_case_globals)]
pub const P_tmpdir: &'static [u8; 5usize] = b"/tmp\0";
pub const _BITS_STDIO_LIM_H: u32 = 1;
#[allow(non_upper_case_globals)]
pub const L_tmpnam: u32 = 20;
pub const TMP_MAX: u32 = 238328;
pub const FILENAME_MAX: u32 = 4096;
#[allow(non_upper_case_globals)]
pub const L_ctermid: u32 = 9;
pub const FOPEN_MAX: u32 = 16;
pub const FMLTYPE32: &'static [u8; 6usize] = b"FML32\0";
pub const VIEWTYPE32: &'static [u8; 7usize] = b"VIEW32\0";
pub const RECORDTYPE: &'static [u8; 7usize] = b"RECORD\0";
pub const TPNOBLOCK: u32 = 1;
pub const TPSIGRSTRT: u32 = 2;
pub const TPNOREPLY: u32 = 4;
pub const TPNOTRAN: u32 = 8;
pub const TPTRAN: u32 = 16;
pub const TPNOTIME: u32 = 32;
pub const TPABSOLUTE: u32 = 64;
pub const TPGETANY: u32 = 128;
pub const TPNOCHANGE: u32 = 256;
pub const RESERVED_BIT1: u32 = 512;
pub const TPCONV: u32 = 1024;
pub const TPSENDONLY: u32 = 2048;
pub const TPRECVONLY: u32 = 4096;
pub const TPACK: u32 = 8192;
pub const TPACK_INTL: u32 = 16384;
pub const RESERVED_BIT3: u32 = 32768;
pub const TPNOCOPY: u32 = 32768;
pub const RESERVED_BIT4: u32 = 65536;
pub const RESERVED_BIT5: u32 = 131072;
pub const TPSINGLETON: u32 = 1;
pub const TPSECONDARYRQ: u32 = 2;
pub const TPFAIL: u32 = 1;
pub const TPSUCCESS: u32 = 2;
pub const TPEXIT: u32 = 134217728;
pub const TP_CMT_LOGGED: u32 = 1;
pub const TP_CMT_COMPLETE: u32 = 2;
pub const TPU_MASK: u32 = 71;
pub const TPU_SIG: u32 = 1;
pub const TPU_DIP: u32 = 2;
pub const TPU_IGN: u32 = 4;
pub const TPSA_FASTPATH: u32 = 8;
pub const TPSA_PROTECTED: u32 = 16;
pub const TPMULTICONTEXTS: u32 = 32;
pub const TPU_THREAD: u32 = 64;
pub const TPTOSTRING: u32 = 1073741824;
pub const TPCONVCLTID: u32 = 1;
pub const TPCONVTRANID: u32 = 2;
pub const TPCONVXID: u32 = 4;
pub const TPCONVMAXSTR: u32 = 256;
pub const TPNOAUTH: u32 = 0;
pub const TPSYSAUTH: u32 = 1;
pub const TPAPPAUTH: u32 = 2;
pub const MAXTIDENT: u32 = 30;
pub const RM_ENC: u32 = 1;
pub const MBAUTOCONVERSION_OFF: u32 = 0;
pub const MBAUTOCONVERSION_ON: u32 = 1;
pub const XATMI_SERVICE_NAME_LENGTH: u32 = 128;
pub const X_OCTET: &'static [u8; 8usize] = b"X_OCTET\0";
pub const X_C_TYPE: &'static [u8; 9usize] = b"X_C_TYPE\0";
pub const X_COMMON: &'static [u8; 9usize] = b"X_COMMON\0";
pub const TPNULLCONTEXT: i32 = -2;
pub const TPINVALIDCONTEXT: i32 = -1;
pub const TPSINGLECONTEXT: u32 = 0;
pub const MAXECIDLEN: u32 = 64;
pub const TPMINVAL: u32 = 0;
pub const TPEABORT: u32 = 1;
pub const TPEBADDESC: u32 = 2;
pub const TPEBLOCK: u32 = 3;
pub const TPEINVAL: u32 = 4;
pub const TPELIMIT: u32 = 5;
pub const TPENOENT: u32 = 6;
pub const TPEOS: u32 = 7;
pub const TPEPERM: u32 = 8;
pub const TPEPROTO: u32 = 9;
pub const TPESVCERR: u32 = 10;
pub const TPESVCFAIL: u32 = 11;
pub const TPESYSTEM: u32 = 12;
pub const TPETIME: u32 = 13;
pub const TPETRAN: u32 = 14;
pub const TPGOTSIG: u32 = 15;
pub const TPERMERR: u32 = 16;
pub const TPEITYPE: u32 = 17;
pub const TPEOTYPE: u32 = 18;
pub const TPERELEASE: u32 = 19;
pub const TPEHAZARD: u32 = 20;
pub const TPEHEURISTIC: u32 = 21;
pub const TPEEVENT: u32 = 22;
pub const TPEMATCH: u32 = 23;
pub const TPEDIAGNOSTIC: u32 = 24;
pub const TPEMIB: u32 = 25;
pub const TPENOSINGLETON: u32 = 26;
pub const TPENOSECONDARYRQ: u32 = 27;
pub const TPMAXVAL: u32 = 28;
pub const TPED_MINVAL: u32 = 0;
pub const TPED_SVCTIMEOUT: u32 = 1;
pub const TPED_TERM: u32 = 2;
pub const TPED_NOUNSOLHANDLER: u32 = 3;
pub const TPED_NOCLIENT: u32 = 4;
pub const TPED_DOMAINUNREACHABLE: u32 = 5;
pub const TPED_CLIENTDISCONNECTED: u32 = 6;
pub const TPED_PERM: u32 = 7;
pub const TPED_OTS_INTERNAL: u32 = 8;
pub const TPED_INVALID_CERTIFICATE: u32 = 9;
pub const TPED_INVALID_SIGNATURE: u32 = 10;
pub const TPED_DECRYPTION_FAILURE: u32 = 11;
pub const TPED_INVALIDCONTEXT: u32 = 12;
pub const TPED_INVALID_XA_TRANSACTION: u32 = 13;
pub const TPED_MBCONV: u32 = 14;
pub const TPED_DECUTCM_FAILURE: u32 = 15;
pub const TPED_GROUP_FORBIDDEN: u32 = 16;
pub const TPED_RDMA_MSGQDAEMON: u32 = 17;
pub const TPED_RDMA_INVALIDQUEUE: u32 = 18;
pub const TPED_RDMA_NOMEMORY: u32 = 19;
pub const TPED_MAXVAL: u32 = 20;
pub const TPEV_DISCONIMM: u32 = 1;
pub const TPEV_SVCERR: u32 = 2;
pub const TPEV_SVCFAIL: u32 = 4;
pub const TPEV_SVCSUCC: u32 = 8;
pub const TPEV_SENDONLY: u32 = 32;
pub const TMQNAMELEN: u32 = 127;
pub const TMQSNAMELEN: u32 = 15;
pub const TMMSGIDLEN: u32 = 32;
pub const TMCORRIDLEN: u32 = 32;
pub const AUXIDX_FLAGS: u32 = 0;
pub const AUXIDX_MSGCNT: u32 = 1;
pub const AUXIDX_QSPACEUSAGE: u32 = 2;
pub const AUXIDX_TGTBLOCK: u32 = 3;
pub const TPNOFLAGS: u32 = 0;
pub const TPQCORRID: u32 = 1;
pub const TPQFAILUREQ: u32 = 2;
pub const TPQBEFOREMSGID: u32 = 4;
pub const TPQGETBYMSGIDOLD: u32 = 8;
pub const TPQMSGID: u32 = 16;
pub const TPQPRIORITY: u32 = 32;
pub const TPQTOP: u32 = 64;
pub const TPQWAIT: u32 = 128;
pub const TPQREPLYQ: u32 = 256;
pub const TPQTIME_ABS: u32 = 512;
pub const TPQTIME_REL: u32 = 1024;
pub const TPQGETBYCORRIDOLD: u32 = 2048;
pub const TPQPEEK: u32 = 4096;
pub const TPQDELIVERYQOS: u32 = 8192;
pub const TPQREPLYQOS: u32 = 16384;
pub const TPQEXPTIME_ABS: u32 = 32768;
pub const TPQEXPTIME_REL: u32 = 65536;
pub const TPQEXPTIME_NONE: u32 = 131072;
pub const TPQGETBYMSGID: u32 = 262152;
pub const TPQGETBYCORRID: u32 = 526336;
pub const TPQCICSCANCEL: u32 = 1073741824;
pub const TSQ: u32 = 536870912;
pub const TPQENQGETUSAGE: u32 = 2147483648;
pub const TPQQOSDEFAULTPERSIST: u32 = 1;
pub const TPQQOSPERSISTENT: u32 = 2;
pub const TPQQOSNONPERSISTENT: u32 = 4;
pub const QMEINVAL: i32 = -1;
pub const QMEBADRMID: i32 = -2;
pub const QMENOTOPEN: i32 = -3;
pub const QMETRAN: i32 = -4;
pub const QMEBADMSGID: i32 = -5;
pub const QMESYSTEM: i32 = -6;
pub const QMEOS: i32 = -7;
pub const QMEABORTED: i32 = -8;
pub const QMENOTA: i32 = -8;
pub const QMEPROTO: i32 = -9;
pub const QMEBADQUEUE: i32 = -10;
pub const QMENOMSG: i32 = -11;
pub const QMEINUSE: i32 = -12;
pub const QMENOSPACE: i32 = -13;
pub const QMERELEASE: i32 = -14;
pub const QMEINVHANDLE: i32 = -15;
pub const QMESHARE: i32 = -16;
pub const TPEVSERVICE: u32 = 1;
pub const TPEVQUEUE: u32 = 2;
pub const TPEVTRAN: u32 = 4;
pub const TPEVPERSIST: u32 = 8;
pub const TPEVRESERVED1: u32 = 16;
pub const TPEVRESERVED2: u32 = 32;
pub const TPEVRESERVED3: u32 = 64;
pub const TPKEY_SIGNATURE: u32 = 16;
pub const TPKEY_DECRYPT: u32 = 32;
pub const TPKEY_ENCRYPT: u32 = 64;
pub const TPKEY_VERIFICATION: u32 = 128;
pub const TPKEY_AUTOSIGN: u32 = 256;
pub const TPKEY_AUTOENCRYPT: u32 = 512;
pub const TPKEY_REMOVE: u32 = 1024;
pub const TPKEY_REMOVEALL: u32 = 2048;
pub const TPKEY_VERIFY: u32 = 4096;
pub const TPEX_STRING: u32 = 1;
pub const TPSEAL_OK: u32 = 1;
pub const TPSEAL_PENDING: u32 = 2;
pub const TPSEAL_EXPIRED_CERT: u32 = 4;
pub const TPSEAL_REVOKED_CERT: u32 = 8;
pub const TPSEAL_TAMPERED_CERT: u32 = 16;
pub const TPSEAL_UNKNOWN: u32 = 32;
pub const TPSIGN_OK: u32 = 64;
pub const TPSIGN_PENDING: u32 = 128;
pub const TPSIGN_EXPIRED: u32 = 256;
pub const TPSIGN_EXPIRED_CERT: u32 = 512;
pub const TPSIGN_POSTDATED: u32 = 1024;
pub const TPSIGN_REVOKED_CERT: u32 = 2048;
pub const TPSIGN_TAMPERED_CERT: u32 = 4096;
pub const TPSIGN_TAMPERED_MESSAGE: u32 = 8192;
pub const TPSIGN_UNKNOWN: u32 = 16384;
pub const TMSRVRFLAG_COBOL: u32 = 1;
pub const TPBLK_NEXT: u32 = 1;
pub const TPBLK_ALL: u32 = 2;
pub const TPBLK_SECOND: u32 = 0;
pub const TPBLK_MILLISECOND: u32 = 16777216;
pub const TPBLK_MICROSECOND: u32 = 33554432;
pub const TPBLK__MASK: u32 = 4278190080;
pub const TDC_ERR_CACHE_NOTEXIST: u32 = 100;
pub const TDC_ERR_CACHE_UNAVAIL: u32 = 101;
pub const TDC_ERR_KEY_NOTEXIST: u32 = 200;
extern "C" {
    pub static mut h_tmenv: [::std::os::raw::c_char; 48usize];
}
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type __u_char = ::std::os::raw::c_uchar;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type __u_short = ::std::os::raw::c_ushort;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type __u_int = ::std::os::raw::c_uint;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type __u_long = ::std::os::raw::c_ulong;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type __int8_t = ::std::os::raw::c_schar;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type __uint8_t = ::std::os::raw::c_uchar;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type __int16_t = ::std::os::raw::c_short;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type __uint16_t = ::std::os::raw::c_ushort;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type __int32_t = ::std::os::raw::c_int;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type __uint32_t = ::std::os::raw::c_uint;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type __int64_t = ::std::os::raw::c_long;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type __uint64_t = ::std::os::raw::c_ulong;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type __int_least8_t = __int8_t;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type __uint_least8_t = __uint8_t;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type __int_least16_t = __int16_t;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type __uint_least16_t = __uint16_t;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type __int_least32_t = __int32_t;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type __uint_least32_t = __uint32_t;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type __int_least64_t = __int64_t;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type __uint_least64_t = __uint64_t;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type __quad_t = ::std::os::raw::c_long;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type __u_quad_t = ::std::os::raw::c_ulong;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type __intmax_t = ::std::os::raw::c_long;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type __uintmax_t = ::std::os::raw::c_ulong;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type __dev_t = ::std::os::raw::c_ulong;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type __uid_t = ::std::os::raw::c_uint;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type __gid_t = ::std::os::raw::c_uint;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type __ino_t = ::std::os::raw::c_ulong;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type __ino64_t = ::std::os::raw::c_ulong;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type __mode_t = ::std::os::raw::c_uint;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type __nlink_t = ::std::os::raw::c_ulong;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type __off_t = ::std::os::raw::c_long;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type __off64_t = ::std::os::raw::c_long;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type __clock_t = ::std::os::raw::c_long;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type __rlim_t = ::std::os::raw::c_ulong;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type __rlim64_t = ::std::os::raw::c_ulong;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type __id_t = ::std::os::raw::c_uint;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type __time_t = ::std::os::raw::c_long;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type __useconds_t = ::std::os::raw::c_uint;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type __suseconds_t = ::std::os::raw::c_long;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type __daddr_t = ::std::os::raw::c_int;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type __key_t = ::std::os::raw::c_int;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type __clockid_t = ::std::os::raw::c_int;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type __timer_t = *mut ::std::os::raw::c_void;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type __blksize_t = ::std::os::raw::c_long;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type __blkcnt_t = ::std::os::raw::c_long;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type __blkcnt64_t = ::std::os::raw::c_long;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type __fsword_t = ::std::os::raw::c_long;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type __ssize_t = ::std::os::raw::c_long;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type __syscall_slong_t = ::std::os::raw::c_long;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type __loff_t = __off64_t;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type __caddr_t = *mut ::std::os::raw::c_char;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type __intptr_t = ::std::os::raw::c_long;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type __socklen_t = ::std::os::raw::c_uint;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type __sig_atomic_t = ::std::os::raw::c_int;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type u_char = __u_char;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type u_short = __u_short;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type u_int = __u_int;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type u_long = __u_long;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type quad_t = __quad_t;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type u_quad_t = __u_quad_t;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type fsid_t = __fsid_t;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type loff_t = __loff_t;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type ino_t = __ino_t;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type dev_t = __dev_t;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type gid_t = __gid_t;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type mode_t = __mode_t;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type nlink_t = __nlink_t;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type uid_t = __uid_t;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type off_t = __off_t;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type pid_t = __pid_t;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type id_t = __id_t;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type ssize_t = __ssize_t;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type daddr_t = __daddr_t;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type caddr_t = __caddr_t;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type key_t = __key_t;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type clock_t = __clock_t;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type clockid_t = __clockid_t;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type time_t = __time_t;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type timer_t = __timer_t;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type size_t = ::std::os::raw::c_ulong;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type ulong = ::std::os::raw::c_ulong;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type ushort = ::std::os::raw::c_ushort;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type uint = ::std::os::raw::c_uint;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type u_int8_t = __uint8_t;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type u_int16_t = __uint16_t;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type u_int32_t = __uint32_t;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type u_int64_t = __uint64_t;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type register_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[test]
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
fn bindgen_test_layout___sigset_t() {
    assert_eq!(
        ::std::mem::size_of::<__sigset_t>(),
        128usize,
        concat!("Size of: ", stringify!(__sigset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigset_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigset_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sigset_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigset_t),
            "::",
            stringify!(__val)
        )
    );
}
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_usec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_usec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_nsec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type suseconds_t = __suseconds_t;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    assert_eq!(
        ::std::mem::size_of::<fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(fd_set))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fd_set>())).__fds_bits as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fd_set),
            "::",
            stringify!(__fds_bits)
        )
    );
}
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type blksize_t = __blksize_t;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type blkcnt_t = __blkcnt_t;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type fsblkcnt_t = __fsblkcnt_t;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type fsfilcnt_t = __fsfilcnt_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[test]
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
fn bindgen_test_layout___pthread_internal_list() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_list>(),
        16usize,
        concat!("Size of: ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_list>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__next)
        )
    );
}
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub struct __pthread_internal_slist {
    pub __next: *mut __pthread_internal_slist,
}
#[test]
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
fn bindgen_test_layout___pthread_internal_slist() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_slist>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_slist>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_slist>())).__next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_slist),
            "::",
            stringify!(__next)
        )
    );
}
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type __pthread_slist_t = __pthread_internal_slist;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[test]
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
fn bindgen_test_layout___pthread_mutex_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_mutex_s>(),
        40usize,
        concat!("Size of: ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_mutex_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__lock as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__count as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__owner as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__owner)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__nusers as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__nusers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__kind as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__kind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__spins as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__spins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__elision as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__elision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__list as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__list)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[test]
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
fn bindgen_test_layout___pthread_rwlock_arch_t() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_rwlock_arch_t>(),
        56usize,
        concat!("Size of: ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_rwlock_arch_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__readers as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__readers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__wrphase_futex as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__wrphase_futex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers_futex as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers_futex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad3 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad4 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__cur_writer as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__cur_writer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__shared as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__shared)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__rwelision as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__rwelision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad1 as *const _ as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad2 as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__flags as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__flags)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __bindgen_anon_1: __pthread_cond_s__bindgen_ty_1,
    pub __bindgen_anon_2: __pthread_cond_s__bindgen_ty_2,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_1 {
    pub __wseq: ::std::os::raw::c_ulonglong,
    pub __wseq32: __pthread_cond_s__bindgen_ty_1__bindgen_ty_1,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__low
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__high
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq32 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq32)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_2 {
    pub __g1_start: ::std::os::raw::c_ulonglong,
    pub __g1_start32: __pthread_cond_s__bindgen_ty_2__bindgen_ty_1,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__low
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__high
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start32 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start32)
        )
    );
}
#[test]
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
fn bindgen_test_layout___pthread_cond_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s>(),
        48usize,
        concat!("Size of: ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_refs as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_refs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g1_orig_size as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g1_orig_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__wrefs as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__wrefs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_signals as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_signals)
        )
    );
}
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_mutexattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_condattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_condattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_condattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type pthread_key_t = ::std::os::raw::c_uint;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 7usize],
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_attr_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 5usize],
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t>(),
        40usize,
        concat!("Size of: ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
    _bindgen_union_align: [u64; 6usize],
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 7usize],
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_pthread_rwlockattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 4usize],
}
#[test]
fn bindgen_test_layout_pthread_barrier_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrier_t>(),
        32usize,
        concat!("Size of: ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrier_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_barrierattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type isize_t = size_t;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type iuid_t = uid_t;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type igid_t = gid_t;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type _TMXDRINT = ::std::os::raw::c_int;
pub type _TMXDRUINT = ::std::os::raw::c_uint;
pub type TMNUMPTR = size_t;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type wchar_t = ::std::os::raw::c_int;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
#[allow(non_upper_case_globals)]
pub const idtype_t_P_ALL: idtype_t = 0;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
#[allow(non_upper_case_globals)]
pub const idtype_t_P_PID: idtype_t = 1;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
#[allow(non_upper_case_globals)]
pub const idtype_t_P_PGID: idtype_t = 2;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
#[allow(non_upper_case_globals)]
pub type idtype_t = ::std::os::raw::c_uint;
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_div_t() {
    assert_eq!(
        ::std::mem::size_of::<div_t>(),
        8usize,
        concat!("Size of: ", stringify!(div_t))
    );
    assert_eq!(
        ::std::mem::align_of::<div_t>(),
        4usize,
        concat!("Alignment of ", stringify!(div_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<div_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<div_t>())).rem as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_ldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<ldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(ldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_lldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<lldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(lldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<lldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(lldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    pub fn __ctype_get_mb_cur_max() -> size_t;
}
extern "C" {
    pub fn atof(__nptr: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtod(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn strtof(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    #[allow(improper_ctypes)]
    pub fn strtold(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> u128;
}
extern "C" {
    pub fn strtol(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoul(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtouq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strtoll(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoull(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn l64a(__n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn a64l(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn random() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srandom(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn initstate(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn setstate(__statebuf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct random_data {
    pub fptr: *mut i32,
    pub rptr: *mut i32,
    pub state: *mut i32,
    pub rand_type: ::std::os::raw::c_int,
    pub rand_deg: ::std::os::raw::c_int,
    pub rand_sep: ::std::os::raw::c_int,
    pub end_ptr: *mut i32,
}
#[test]
fn bindgen_test_layout_random_data() {
    assert_eq!(
        ::std::mem::size_of::<random_data>(),
        48usize,
        concat!("Size of: ", stringify!(random_data))
    );
    assert_eq!(
        ::std::mem::align_of::<random_data>(),
        8usize,
        concat!("Alignment of ", stringify!(random_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).fptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(fptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).state as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_type as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_deg as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_deg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_sep as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_sep)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).end_ptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(end_ptr)
        )
    );
}
extern "C" {
    pub fn random_r(__buf: *mut random_data, __result: *mut i32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srandom_r(
        __seed: ::std::os::raw::c_uint,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initstate_r(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: size_t,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setstate_r(
        __statebuf: *mut ::std::os::raw::c_char,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn rand_r(__seed: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drand48() -> f64;
}
extern "C" {
    pub fn erand48(__xsubi: *mut ::std::os::raw::c_ushort) -> f64;
}
extern "C" {
    pub fn lrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn nrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn mrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srand48(__seedval: ::std::os::raw::c_long);
}
extern "C" {
    pub fn seed48(__seed16v: *mut ::std::os::raw::c_ushort) -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn lcong48(__param: *mut ::std::os::raw::c_ushort);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drand48_data {
    pub __x: [::std::os::raw::c_ushort; 3usize],
    pub __old_x: [::std::os::raw::c_ushort; 3usize],
    pub __c: ::std::os::raw::c_ushort,
    pub __init: ::std::os::raw::c_ushort,
    pub __a: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_drand48_data() {
    assert_eq!(
        ::std::mem::size_of::<drand48_data>(),
        24usize,
        concat!("Size of: ", stringify!(drand48_data))
    );
    assert_eq!(
        ::std::mem::align_of::<drand48_data>(),
        8usize,
        concat!("Alignment of ", stringify!(drand48_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__old_x as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__old_x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__c as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__c)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__init as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__a as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__a)
        )
    );
}
extern "C" {
    pub fn drand48_r(__buffer: *mut drand48_data, __result: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn erand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand48_r(
        __seedval: ::std::os::raw::c_long,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seed48_r(
        __seed16v: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lcong48_r(
        __param: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn malloc(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(
        __nmemb: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn realloc(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn reallocarray(
        __ptr: *mut ::std::os::raw::c_void,
        __nmemb: size_t,
        __size: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn free(__ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn alloca(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn valloc(__size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn posix_memalign(
        __memptr: *mut *mut ::std::os::raw::c_void,
        __alignment: size_t,
        __size: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aligned_alloc(__alignment: size_t, __size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn abort();
}
extern "C" {
    pub fn atexit(__func: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn at_quick_exit(
        __func: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn on_exit(
        __func: ::std::option::Option<
            unsafe extern "C" fn(
                __status: ::std::os::raw::c_int,
                __arg: *mut ::std::os::raw::c_void,
            ),
        >,
        __arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn quick_exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _Exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn getenv(__name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn putenv(__string: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setenv(
        __name: *const ::std::os::raw::c_char,
        __value: *const ::std::os::raw::c_char,
        __replace: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unsetenv(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearenv() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mktemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkstemp(__template: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemps(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdtemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn system(__command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn realpath(
        __name: *const ::std::os::raw::c_char,
        __resolved: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type __compar_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
extern "C" {
    pub fn bsearch(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nmemb: size_t,
        __size: size_t,
        __compar: __compar_fn_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort(
        __base: *mut ::std::os::raw::c_void,
        __nmemb: size_t,
        __size: size_t,
        __compar: __compar_fn_t,
    );
}
extern "C" {
    pub fn abs(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn labs(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llabs(__x: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn div(__numer: ::std::os::raw::c_int, __denom: ::std::os::raw::c_int) -> div_t;
}
extern "C" {
    pub fn ldiv(__numer: ::std::os::raw::c_long, __denom: ::std::os::raw::c_long) -> ldiv_t;
}
extern "C" {
    pub fn lldiv(
        __numer: ::std::os::raw::c_longlong,
        __denom: ::std::os::raw::c_longlong,
    ) -> lldiv_t;
}
extern "C" {
    pub fn ecvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[allow(improper_ctypes)]
    pub fn qecvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[allow(improper_ctypes)]
    pub fn qfcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[allow(improper_ctypes)]
    pub fn qgcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fcvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[allow(improper_ctypes)]
    pub fn qecvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[allow(improper_ctypes)]
    pub fn qfcvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: size_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbtowc(
        __pwc: *mut wchar_t,
        __s: *const ::std::os::raw::c_char,
        __n: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wctomb(__s: *mut ::std::os::raw::c_char, __wchar: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs(
        __pwcs: *mut wchar_t,
        __s: *const ::std::os::raw::c_char,
        __n: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn wcstombs(
        __s: *mut ::std::os::raw::c_char,
        __pwcs: *const wchar_t,
        __n: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn rpmatch(__response: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsubopt(
        __optionp: *mut *mut ::std::os::raw::c_char,
        __tokens: *const *mut ::std::os::raw::c_char,
        __valuep: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getloadavg(__loadavg: *mut f64, __nelem: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
pub type TM32I = ::std::os::raw::c_int;
pub type TM32U = ::std::os::raw::c_uint;
extern "C" {
    pub static mut h_atmi: [::std::os::raw::c_char; 45usize];
}
extern "C" {
    pub static mut h_fml32: [::std::os::raw::c_char; 42usize];
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct parser_option {
    pub flags: ::std::os::raw::c_long,
    pub scanner: ::std::os::raw::c_short,
    pub refresh: ::std::os::raw::c_short,
    pub extsche: [::std::os::raw::c_char; 256usize],
    pub nonssche: [::std::os::raw::c_char; 256usize],
    pub datalen: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_parser_option() {
    assert_eq!(
        ::std::mem::size_of::<parser_option>(),
        536usize,
        concat!("Size of: ", stringify!(parser_option))
    );
    assert_eq!(
        ::std::mem::align_of::<parser_option>(),
        8usize,
        concat!("Alignment of ", stringify!(parser_option))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parser_option>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parser_option),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parser_option>())).scanner as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(parser_option),
            "::",
            stringify!(scanner)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parser_option>())).refresh as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(parser_option),
            "::",
            stringify!(refresh)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parser_option>())).extsche as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(parser_option),
            "::",
            stringify!(extsche)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parser_option>())).nonssche as *const _ as usize },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(parser_option),
            "::",
            stringify!(nonssche)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<parser_option>())).datalen as *const _ as usize },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(parser_option),
            "::",
            stringify!(datalen)
        )
    );
}
pub type FLDID32 = TM32U;
pub type FLDLEN32 = TM32U;
pub type FLDOCC32 = TM32I;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Fbfr32 {
    _unused: [u8; 0],
}
pub type FBFR32 = Fbfr32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct RECORD {
    pub rname: [::std::os::raw::c_char; 33usize],
    pub magic: ::std::os::raw::c_char,
    pub flag: ::std::os::raw::c_char,
    pub fld: ::std::os::raw::c_char,
    pub rsize: ::std::os::raw::c_uint,
    pub rdata: [::std::os::raw::c_char; 1usize],
}
#[test]
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
fn bindgen_test_layout_RECORD() {
    assert_eq!(
        ::std::mem::size_of::<RECORD>(),
        44usize,
        concat!("Size of: ", stringify!(RECORD))
    );
    assert_eq!(
        ::std::mem::align_of::<RECORD>(),
        4usize,
        concat!("Alignment of ", stringify!(RECORD))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RECORD>())).rname as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RECORD),
            "::",
            stringify!(rname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RECORD>())).magic as *const _ as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(RECORD),
            "::",
            stringify!(magic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RECORD>())).flag as *const _ as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(RECORD),
            "::",
            stringify!(flag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RECORD>())).fld as *const _ as usize },
        35usize,
        concat!(
            "Offset of field: ",
            stringify!(RECORD),
            "::",
            stringify!(fld)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RECORD>())).rsize as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(RECORD),
            "::",
            stringify!(rsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RECORD>())).rdata as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(RECORD),
            "::",
            stringify!(rdata)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct FVIEWFLD {
    pub vflags: TM32U,
    pub vname: [::std::os::raw::c_char; 34usize],
    pub data: *mut ::std::os::raw::c_char,
}
#[test]
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
fn bindgen_test_layout_FVIEWFLD() {
    assert_eq!(
        ::std::mem::size_of::<FVIEWFLD>(),
        48usize,
        concat!("Size of: ", stringify!(FVIEWFLD))
    );
    assert_eq!(
        ::std::mem::align_of::<FVIEWFLD>(),
        8usize,
        concat!("Alignment of ", stringify!(FVIEWFLD))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FVIEWFLD>())).vflags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FVIEWFLD),
            "::",
            stringify!(vflags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FVIEWFLD>())).vname as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FVIEWFLD),
            "::",
            stringify!(vname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FVIEWFLD>())).data as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(FVIEWFLD),
            "::",
            stringify!(data)
        )
    );
}
extern "C" {
    pub static mut Femsgs32: [*mut ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn _Fget_Ferror_addr32() -> *mut ::std::os::raw::c_int;
}
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type va_list = __builtin_va_list;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type __gnuc_va_list = __builtin_va_list;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: ::std::os::raw::c_uint,
    pub __wchb: [::std::os::raw::c_char; 4usize],
    _bindgen_union_align: u32,
}
#[test]
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
fn bindgen_test_layout___mbstate_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wch as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wchb as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wchb)
        )
    );
}
#[test]
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
fn bindgen_test_layout___mbstate_t() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        8usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__value as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__value)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[test]
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
fn bindgen_test_layout__G_fpos_t() {
    assert_eq!(
        ::std::mem::size_of::<_G_fpos_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__pos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__state)
        )
    );
}
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type __fpos_t = _G_fpos_t;
#[repr(C)]
#[derive(Copy, Clone)]
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
#[test]
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
fn bindgen_test_layout__G_fpos64_t() {
    assert_eq!(
        ::std::mem::size_of::<_G_fpos64_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos64_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__pos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__state)
        )
    );
}
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type __fpos64_t = _G_fpos64_t;
pub type __FILE = _IO_FILE;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type _IO_lock_t = ::std::os::raw::c_void;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::std::os::raw::c_void,
    pub __pad5: size_t,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[test]
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
fn bindgen_test_layout__IO_FILE() {
    assert_eq!(
        ::std::mem::size_of::<_IO_FILE>(),
        216usize,
        concat!("Size of: ", stringify!(_IO_FILE))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_FILE>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_FILE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_ptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_end as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_base as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_base as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_ptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_end as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_base as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_end as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_base as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_backup_base as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_backup_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_end as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._markers as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_markers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._chain as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_chain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._fileno as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_fileno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags2 as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._old_offset as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_old_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._cur_column as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_cur_column)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._vtable_offset as *const _ as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_vtable_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._shortbuf as *const _ as usize },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_shortbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._lock as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._offset as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._codecvt as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_codecvt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._wide_data as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_wide_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._freeres_list as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._freeres_buf as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad5 as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._mode as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._unused2 as *const _ as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_unused2)
        )
    );
}
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type fpos_t = __fpos_t;
extern "C" {
    pub static mut stdin: *mut FILE;
}
extern "C" {
    pub static mut stdout: *mut FILE;
}
extern "C" {
    pub static mut stderr: *mut FILE;
}
extern "C" {
    pub fn remove(__filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameat(
        __oldfd: ::std::os::raw::c_int,
        __old: *const ::std::os::raw::c_char,
        __newfd: ::std::os::raw::c_int,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __pfx: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn freopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fdopen(__fd: ::std::os::raw::c_int, __modes: *const ::std::os::raw::c_char)
        -> *mut FILE;
}
extern "C" {
    pub fn fmemopen(
        __s: *mut ::std::os::raw::c_void,
        __len: size_t,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(
        __bufloc: *mut *mut ::std::os::raw::c_char,
        __sizeloc: *mut size_t,
    ) -> *mut FILE;
}
extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(
        __stream: *mut FILE,
        __buf: *mut ::std::os::raw::c_char,
        __modes: ::std::os::raw::c_int,
        __n: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char, __size: size_t);
}
extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
extern "C" {
    pub fn fprintf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_fscanf"]
    pub fn fscanf1(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_scanf"]
    pub fn scanf1(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_sscanf"]
    pub fn sscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vfscanf"]
    pub fn vfscanf1(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vscanf"]
    pub fn vscanf1(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vsscanf"]
    pub fn vsscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        __s: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut size_t,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut size_t,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getline(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut size_t,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __s: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fread_unlocked(
        __ptr: *mut ::std::os::raw::c_void,
        __size: size_t,
        __n: size_t,
        __stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn fwrite_unlocked(
        __ptr: *const ::std::os::raw::c_void,
        __size: size_t,
        __n: size_t,
        __stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn fseek(
        __stream: *mut FILE,
        __off: ::std::os::raw::c_long,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __off: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> __off_t;
}
extern "C" {
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
extern "C" {
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(__s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub static mut sys_nerr: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut sys_errlist: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(
        __command: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn __uflow(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __overflow(arg1: *mut FILE, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fread32(arg1: *mut FBFR32, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fwrite32(arg1: *mut FBFR32, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CFadd32(
        arg1: *mut FBFR32,
        arg2: FLDID32,
        arg3: *mut ::std::os::raw::c_char,
        arg4: FLDLEN32,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CFchg32(
        arg1: *mut FBFR32,
        arg2: FLDID32,
        arg3: FLDOCC32,
        arg4: *mut ::std::os::raw::c_char,
        arg5: FLDLEN32,
        arg6: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CFfind32(
        arg1: *mut FBFR32,
        arg2: FLDID32,
        arg3: FLDOCC32,
        arg4: *mut FLDLEN32,
        arg5: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn CFfindocc32(
        arg1: *mut FBFR32,
        arg2: FLDID32,
        arg3: *mut ::std::os::raw::c_char,
        arg4: FLDLEN32,
        arg5: ::std::os::raw::c_int,
    ) -> FLDOCC32;
}
extern "C" {
    pub fn CFget32(
        arg1: *mut FBFR32,
        arg2: FLDID32,
        arg3: FLDOCC32,
        arg4: *mut ::std::os::raw::c_char,
        arg5: *mut FLDLEN32,
        arg6: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CFgetalloc32(
        arg1: *mut FBFR32,
        arg2: FLDID32,
        arg3: FLDOCC32,
        arg4: ::std::os::raw::c_int,
        arg5: *mut FLDLEN32,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn F_error32(arg1: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn Fadd32(
        arg1: *mut FBFR32,
        arg2: FLDID32,
        arg3: *mut ::std::os::raw::c_char,
        arg4: FLDLEN32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Falloc32(arg1: FLDOCC32, arg2: FLDLEN32) -> *mut FBFR32;
}
extern "C" {
    pub fn Fappend32(
        arg1: *mut FBFR32,
        arg2: FLDID32,
        arg3: *mut ::std::os::raw::c_char,
        arg4: FLDLEN32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Frealloc32(arg1: *mut FBFR32, arg2: FLDOCC32, arg3: FLDLEN32) -> *mut FBFR32;
}
extern "C" {
    pub fn Ffree32(arg1: *mut FBFR32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fboolev32(arg1: *mut FBFR32, arg2: *mut ::std::os::raw::c_char)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fvboolev32(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Frboolev(arg1: *mut RECORD, arg2: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Ffloatev32(arg1: *mut FBFR32, arg2: *mut ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn Fvfloatev32(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn Fboolpr32(arg1: *mut ::std::os::raw::c_char, arg2: *mut FILE);
}
extern "C" {
    pub fn Fvboolpr32(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut FILE,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fchg32(
        arg1: *mut FBFR32,
        arg2: FLDID32,
        arg3: FLDOCC32,
        arg4: *mut ::std::os::raw::c_char,
        arg5: FLDLEN32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fchksum32(arg1: *mut FBFR32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn Fcmp32(arg1: *mut FBFR32, arg2: *mut FBFR32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fconcat32(arg1: *mut FBFR32, arg2: *mut FBFR32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fcpy32(arg1: *mut FBFR32, arg2: *mut FBFR32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fdelall32(arg1: *mut FBFR32, arg2: FLDID32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fdelete32(arg1: *mut FBFR32, arg2: *mut FLDID32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fextread32(arg1: *mut FBFR32, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Ffind32(
        arg1: *mut FBFR32,
        arg2: FLDID32,
        arg3: FLDOCC32,
        arg4: *mut FLDLEN32,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Fvals32(arg1: *mut FBFR32, arg2: FLDID32, arg3: FLDOCC32)
        -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Fvall32(arg1: *mut FBFR32, arg2: FLDID32, arg3: FLDOCC32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn Ffindocc32(
        arg1: *mut FBFR32,
        arg2: FLDID32,
        arg3: *mut ::std::os::raw::c_char,
        arg4: FLDLEN32,
    ) -> FLDOCC32;
}
extern "C" {
    pub fn Fget32(
        arg1: *mut FBFR32,
        arg2: FLDID32,
        arg3: FLDOCC32,
        arg4: *mut ::std::os::raw::c_char,
        arg5: *mut FLDLEN32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fgetalloc32(
        arg1: *mut FBFR32,
        arg2: FLDID32,
        arg3: FLDOCC32,
        arg4: *mut FLDLEN32,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Fldtype32(arg1: FLDID32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fldno32(arg1: FLDID32) -> FLDOCC32;
}
extern "C" {
    pub fn Fielded32(arg1: *mut FBFR32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fneeded32(arg1: FLDOCC32, arg2: FLDLEN32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn Fused32(arg1: *mut FBFR32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn Fidxused32(arg1: *mut FBFR32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn Funused32(arg1: *mut FBFR32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn Fsizeof32(arg1: *mut FBFR32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn Fmkfldid32(arg1: ::std::os::raw::c_int, arg2: FLDID32) -> FLDID32;
}
extern "C" {
    pub fn Fieldlen32(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut FLDLEN32,
        arg3: *mut FLDLEN32,
    ) -> FLDLEN32;
}
extern "C" {
    pub fn Funindex32(arg1: *mut FBFR32) -> FLDOCC32;
}
extern "C" {
    pub fn Frstrindex32(arg1: *mut FBFR32, arg2: FLDOCC32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Findex32(arg1: *mut FBFR32, arg2: FLDOCC32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Finit32(arg1: *mut FBFR32, arg2: FLDLEN32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fjoin32(arg1: *mut FBFR32, arg2: *mut FBFR32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fojoin32(arg1: *mut FBFR32, arg2: *mut FBFR32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Ffindlast32(
        arg1: *mut FBFR32,
        arg2: FLDID32,
        arg3: *mut FLDOCC32,
        arg4: *mut FLDLEN32,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Fgetlast32(
        arg1: *mut FBFR32,
        arg2: FLDID32,
        arg3: *mut FLDOCC32,
        arg4: *mut ::std::os::raw::c_char,
        arg5: *mut FLDLEN32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Flen32(arg1: *mut FBFR32, arg2: FLDID32, arg3: FLDOCC32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn Fmbpack32(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_void,
        arg3: FLDLEN32,
        arg4: *mut ::std::os::raw::c_void,
        arg5: *mut FLDLEN32,
        arg6: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fmbunpack32(
        arg1: *mut ::std::os::raw::c_void,
        arg2: FLDLEN32,
        arg3: *mut ::std::os::raw::c_char,
        arg4: *mut ::std::os::raw::c_void,
        arg5: *mut FLDLEN32,
        arg6: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fmove32(arg1: *mut ::std::os::raw::c_char, arg2: *mut FBFR32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fnext32(
        arg1: *mut FBFR32,
        arg2: *mut FLDID32,
        arg3: *mut FLDOCC32,
        arg4: *mut ::std::os::raw::c_char,
        arg5: *mut FLDLEN32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fldid32(arg1: *mut ::std::os::raw::c_char) -> FLDID32;
}
extern "C" {
    pub fn Fname32(arg1: FLDID32) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Ftype32(arg1: FLDID32) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Fnmid_unload32();
}
extern "C" {
    pub fn Fidnm_unload32();
}
extern "C" {
    pub fn Fnum32(arg1: *mut FBFR32) -> FLDOCC32;
}
extern "C" {
    pub fn Foccur32(arg1: *mut FBFR32, arg2: FLDID32) -> FLDOCC32;
}
extern "C" {
    pub fn Fprint32(arg1: *mut FBFR32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Ffprint32(arg1: *mut FBFR32, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fsprint32(arg1: *mut FBFR32, arg2: *mut ::std::os::raw::c_char)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fproj32(arg1: *mut FBFR32, arg2: *mut FLDID32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fprojcpy32(
        arg1: *mut FBFR32,
        arg2: *mut FBFR32,
        arg3: *mut FLDID32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Ftypcvt32(
        arg1: *mut FLDLEN32,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_int,
        arg5: FLDLEN32,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Fupdate32(arg1: *mut FBFR32, arg2: *mut FBFR32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fvneeded32(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fvopt32(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fvsinit32(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fvnull32(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
        arg3: FLDOCC32,
        arg4: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fvselinit32(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fvftos32(
        arg1: *mut FBFR32,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fvrefresh32();
}
extern "C" {
    pub fn Frrefresh();
}
extern "C" {
    pub fn Frneeded(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fvstof32(
        arg1: *mut FBFR32,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fboolco32(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Fvboolco32(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Frboolco(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Frboolcobyindex(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Fstrerror32(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Fvttos32(
        cstruct: *mut ::std::os::raw::c_char,
        trecord: *mut ::std::os::raw::c_char,
        viewname: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn Fvstot32(
        cstruct: *mut ::std::os::raw::c_char,
        trecord: *mut ::std::os::raw::c_char,
        treclen: ::std::os::raw::c_long,
        viewname: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn Fcodeset32(codeset: *mut ::std::os::raw::c_uchar) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Flevels32(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn maskprt32(arg1: *mut FBFR32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fdel32(arg1: *mut FBFR32, arg2: FLDID32, arg3: FLDOCC32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fpres32(arg1: *mut FBFR32, arg2: FLDID32, arg3: FLDOCC32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fadds32(
        arg1: *mut FBFR32,
        arg2: FLDID32,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fchgs32(
        arg1: *mut FBFR32,
        arg2: FLDID32,
        arg3: FLDOCC32,
        arg4: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fgets32(
        arg1: *mut FBFR32,
        arg2: FLDID32,
        arg3: FLDOCC32,
        arg4: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fgetsa32(
        arg1: *mut FBFR32,
        arg2: FLDID32,
        arg3: FLDOCC32,
        arg4: *mut FLDLEN32,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Ffinds32(
        arg1: *mut FBFR32,
        arg2: FLDID32,
        arg3: FLDOCC32,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _Finitx32(arg1: *mut FBFR32, arg2: FLDLEN32, arg3: FLDOCC32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tpxmltofml32(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut *mut FBFR32,
        arg4: *mut *mut ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tpfml32toxml(
        arg1: *mut FBFR32,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
        arg4: *mut *mut ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Rinit(
        arg1: *mut RECORD,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Rget(
        arg1: *mut RECORD,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_int,
        arg5: *mut ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Rset(
        arg1: *mut RECORD,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fvrtos32(
        arg1: *mut RECORD,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
        arg4: *mut ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fvstor32(
        arg1: *mut RECORD,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
        arg4: *mut ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fvrtof32(
        arg1: *mut FBFR32,
        arg2: *mut RECORD,
        arg3: *mut ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fvftor32(
        arg1: *mut FBFR32,
        arg2: *mut RECORD,
        arg3: *mut ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clientid_t {
    pub clientdata: [::std::os::raw::c_long; 4usize],
}
#[test]
fn bindgen_test_layout_clientid_t() {
    assert_eq!(
        ::std::mem::size_of::<clientid_t>(),
        32usize,
        concat!("Size of: ", stringify!(clientid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<clientid_t>(),
        8usize,
        concat!("Alignment of ", stringify!(clientid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clientid_t>())).clientdata as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clientid_t),
            "::",
            stringify!(clientdata)
        )
    );
}
pub type CLIENTID = clientid_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tpsvcinfo {
    pub name: [::std::os::raw::c_char; 128usize],
    pub flags: ::std::os::raw::c_long,
    pub data: *mut ::std::os::raw::c_char,
    pub len: ::std::os::raw::c_long,
    pub cd: ::std::os::raw::c_int,
    pub appkey: ::std::os::raw::c_long,
    pub cltid: CLIENTID,
    pub reserved: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_tpsvcinfo() {
    assert_eq!(
        ::std::mem::size_of::<tpsvcinfo>(),
        208usize,
        concat!("Size of: ", stringify!(tpsvcinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<tpsvcinfo>(),
        8usize,
        concat!("Alignment of ", stringify!(tpsvcinfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tpsvcinfo>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tpsvcinfo),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tpsvcinfo>())).flags as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(tpsvcinfo),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tpsvcinfo>())).data as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(tpsvcinfo),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tpsvcinfo>())).len as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(tpsvcinfo),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tpsvcinfo>())).cd as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(tpsvcinfo),
            "::",
            stringify!(cd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tpsvcinfo>())).appkey as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(tpsvcinfo),
            "::",
            stringify!(appkey)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tpsvcinfo>())).cltid as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(tpsvcinfo),
            "::",
            stringify!(cltid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tpsvcinfo>())).reserved as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(tpsvcinfo),
            "::",
            stringify!(reserved)
        )
    );
}
pub type TPSVCINFO = tpsvcinfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tpinfo_t {
    pub usrname: [::std::os::raw::c_char; 32usize],
    pub cltname: [::std::os::raw::c_char; 32usize],
    pub passwd: [::std::os::raw::c_char; 32usize],
    pub grpname: [::std::os::raw::c_char; 32usize],
    pub flags: ::std::os::raw::c_long,
    pub datalen: ::std::os::raw::c_long,
    pub data: ::std::os::raw::c_long,
    pub reserved: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_tpinfo_t() {
    assert_eq!(
        ::std::mem::size_of::<tpinfo_t>(),
        160usize,
        concat!("Size of: ", stringify!(tpinfo_t))
    );
    assert_eq!(
        ::std::mem::align_of::<tpinfo_t>(),
        8usize,
        concat!("Alignment of ", stringify!(tpinfo_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tpinfo_t>())).usrname as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tpinfo_t),
            "::",
            stringify!(usrname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tpinfo_t>())).cltname as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tpinfo_t),
            "::",
            stringify!(cltname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tpinfo_t>())).passwd as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(tpinfo_t),
            "::",
            stringify!(passwd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tpinfo_t>())).grpname as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(tpinfo_t),
            "::",
            stringify!(grpname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tpinfo_t>())).flags as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(tpinfo_t),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tpinfo_t>())).datalen as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(tpinfo_t),
            "::",
            stringify!(datalen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tpinfo_t>())).data as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(tpinfo_t),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tpinfo_t>())).reserved as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(tpinfo_t),
            "::",
            stringify!(reserved)
        )
    );
}
pub type TPINIT = tpinfo_t;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type TPCONTEXT_T = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tp_tranid_t {
    pub info: [::std::os::raw::c_long; 6usize],
}
#[test]
fn bindgen_test_layout_tp_tranid_t() {
    assert_eq!(
        ::std::mem::size_of::<tp_tranid_t>(),
        48usize,
        concat!("Size of: ", stringify!(tp_tranid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<tp_tranid_t>(),
        8usize,
        concat!("Alignment of ", stringify!(tp_tranid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tp_tranid_t>())).info as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tp_tranid_t),
            "::",
            stringify!(info)
        )
    );
}
pub type TPTRANID = tp_tranid_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tpmetainfo {
    pub ecid: [::std::os::raw::c_char; 64usize],
    pub unused: [::std::os::raw::c_char; 1984usize],
}
#[test]
fn bindgen_test_layout_tpmetainfo() {
    assert_eq!(
        ::std::mem::size_of::<tpmetainfo>(),
        2048usize,
        concat!("Size of: ", stringify!(tpmetainfo))
    );
    assert_eq!(
        ::std::mem::align_of::<tpmetainfo>(),
        1usize,
        concat!("Alignment of ", stringify!(tpmetainfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tpmetainfo>())).ecid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tpmetainfo),
            "::",
            stringify!(ecid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tpmetainfo>())).unused as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(tpmetainfo),
            "::",
            stringify!(unused)
        )
    );
}
pub type TPMETAINFO = tpmetainfo;
extern "C" {
    pub fn _tmget_tperrno_addr() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn _tmget_tpurcode_addr() -> *mut ::std::os::raw::c_long;
}
extern "C" {
    pub fn tpalloc(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_long,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tprealloc(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_long,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tpcall(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_long,
        arg4: *mut *mut ::std::os::raw::c_char,
        arg5: *mut ::std::os::raw::c_long,
        arg6: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tpgettimestamp(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_long,
        arg3: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tpacall(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_long,
        arg4: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tpgetrply(
        arg1: *mut ::std::os::raw::c_int,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_long,
        arg4: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tpcancel(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tpscmt(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tpabort(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tpbegin(
        arg1: ::std::os::raw::c_ulong,
        arg2: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tpcommit(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tpconvert(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tpsuspend(arg1: *mut TPTRANID, arg2: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tpresume(arg1: *mut TPTRANID, arg2: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tpsvrinit(
        arg1: ::std::os::raw::c_int,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tprminit(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tpsvrthrinit(
        arg1: ::std::os::raw::c_int,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tpinit(arg1: *mut TPINIT) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tpterm() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tpgetctxt(arg1: *mut TPCONTEXT_T, arg2: ::std::os::raw::c_long)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tpsetctxt(arg1: TPCONTEXT_T, arg2: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tpsprio(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tpgprio() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tpopen() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tpclose() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tpgetlev() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tptypes(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn tpfree(arg1: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn tpforward(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_long,
        arg4: ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn tpreturn(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_long,
        arg3: *mut ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_long,
        arg5: ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn tpsvrdone();
}
extern "C" {
    pub fn tpsvrthrdone();
}
extern "C" {
    pub fn tpchkauth() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tpbroadcast(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
        arg4: *mut ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_long,
        arg6: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tpnotify(
        arg1: *mut CLIENTID,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_long,
        arg4: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tpsetunsol(
        arg1: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_char,
                arg2: ::std::os::raw::c_long,
                arg3: ::std::os::raw::c_long,
            ),
        >,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_char,
            arg2: ::std::os::raw::c_long,
            arg3: ::std::os::raw::c_long,
        ),
    >;
}
extern "C" {
    pub fn tpchkunsol() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tpadvertise(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: *mut TPSVCINFO)>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tpadvertisex(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: *mut TPSVCINFO)>,
        flags: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tpunadvertise(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tpstrerror(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tperrordetail(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn tpstrerrordetail(
        arg1: ::std::os::raw::c_long,
        arg2: ::std::os::raw::c_long,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tpatz(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tpsend(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_long,
        arg4: ::std::os::raw::c_long,
        arg5: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tprecv(
        arg1: ::std::os::raw::c_int,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_long,
        arg4: ::std::os::raw::c_long,
        arg5: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tpconnect(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_long,
        arg4: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tpdiscon(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tuxgetenv(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tuxputenv(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tuxreadenv(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tuxthrputenv(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tpconvmb(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tpconvfmb32(
        arg1: *mut *mut FBFR32,
        arg2: *mut FLDID32,
        arg3: *mut ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tpconvvmb32(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut FLDID32,
        arg3: *mut ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tpgetmbenc(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tpsetmbenc(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tuxgetmbenc(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tuxsetmbenc(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tuxgetmbaconv(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tuxsetmbaconv(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fstof_kix32(
        arg1: *mut FBFR32,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fftos_kix32(
        arg1: *mut FBFR32,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fstof_kix32_v2(
        arg1: *mut FBFR32,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fftos_kix32_v2(
        arg1: *mut FBFR32,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct psb_t {
    pub type_of_psb: ::std::os::raw::c_long,
    pub del_psb_status: ::std::os::raw::c_long,
    pub uma_psb_status: ::std::os::raw::c_long,
    pub psb_reserved: [::std::os::raw::c_long; 6usize],
}
#[test]
fn bindgen_test_layout_psb_t() {
    assert_eq!(
        ::std::mem::size_of::<psb_t>(),
        72usize,
        concat!("Size of: ", stringify!(psb_t))
    );
    assert_eq!(
        ::std::mem::align_of::<psb_t>(),
        8usize,
        concat!("Alignment of ", stringify!(psb_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<psb_t>())).type_of_psb as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(psb_t),
            "::",
            stringify!(type_of_psb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<psb_t>())).del_psb_status as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(psb_t),
            "::",
            stringify!(del_psb_status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<psb_t>())).uma_psb_status as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(psb_t),
            "::",
            stringify!(uma_psb_status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<psb_t>())).psb_reserved as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(psb_t),
            "::",
            stringify!(psb_reserved)
        )
    );
}
pub type PSB = psb_t;
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tpqctl_t {
    pub flags: ::std::os::raw::c_long,
    pub deq_time: ::std::os::raw::c_long,
    pub priority: ::std::os::raw::c_long,
    pub diagnostic: ::std::os::raw::c_long,
    pub msgid: [::std::os::raw::c_char; 32usize],
    pub corrid: [::std::os::raw::c_char; 32usize],
    pub replyqueue: [::std::os::raw::c_char; 128usize],
    pub failurequeue: [::std::os::raw::c_char; 128usize],
    pub cltid: CLIENTID,
    pub urcode: ::std::os::raw::c_long,
    pub appkey: ::std::os::raw::c_long,
    pub delivery_qos: ::std::os::raw::c_long,
    pub reply_qos: ::std::os::raw::c_long,
    pub exp_time: ::std::os::raw::c_long,
    pub block: ::std::os::raw::c_long,
    pub DIP: ::std::os::raw::c_long,
    pub uma: ::std::os::raw::c_long,
    pub msg_class: ::std::os::raw::c_long,
    pub msg_type: ::std::os::raw::c_long,
    pub status_block: PSB,
    pub redeliver_count: ::std::os::raw::c_long,
    pub seq_number: [::std::os::raw::c_long; 2usize],
    pub timeout: ::std::os::raw::c_long,
    pub src_qspace: [::std::os::raw::c_char; 16usize],
    pub src_qname: [::std::os::raw::c_char; 128usize],
    pub tgt_qspace: [::std::os::raw::c_char; 16usize],
    pub tgt_qname: [::std::os::raw::c_char; 128usize],
    pub orig_src_qspace: [::std::os::raw::c_char; 16usize],
    pub orig_src_qname: [::std::os::raw::c_char; 128usize],
    pub orig_tgt_qspace: [::std::os::raw::c_char; 16usize],
    pub orig_tgt_qname: [::std::os::raw::c_char; 128usize],
    pub hops: ::std::os::raw::c_char,
    pub opcode: ::std::os::raw::c_long,
    pub filter_idx: ::std::os::raw::c_long,
    pub user_tag: ::std::os::raw::c_long,
    pub geta_idx: ::std::os::raw::c_long,
    pub endian: ::std::os::raw::c_long,
    pub receipt_msg_type: ::std::os::raw::c_long,
    pub auxiliary: [::std::os::raw::c_long; 16usize],
    pub reserved: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_tpqctl_t() {
    assert_eq!(
        ::std::mem::size_of::<tpqctl_t>(),
        1336usize,
        concat!("Size of: ", stringify!(tpqctl_t))
    );
    assert_eq!(
        ::std::mem::align_of::<tpqctl_t>(),
        8usize,
        concat!("Alignment of ", stringify!(tpqctl_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tpqctl_t>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tpqctl_t),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tpqctl_t>())).deq_time as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tpqctl_t),
            "::",
            stringify!(deq_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tpqctl_t>())).priority as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tpqctl_t),
            "::",
            stringify!(priority)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tpqctl_t>())).diagnostic as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tpqctl_t),
            "::",
            stringify!(diagnostic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tpqctl_t>())).msgid as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tpqctl_t),
            "::",
            stringify!(msgid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tpqctl_t>())).corrid as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(tpqctl_t),
            "::",
            stringify!(corrid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tpqctl_t>())).replyqueue as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(tpqctl_t),
            "::",
            stringify!(replyqueue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tpqctl_t>())).failurequeue as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(tpqctl_t),
            "::",
            stringify!(failurequeue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tpqctl_t>())).cltid as *const _ as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(tpqctl_t),
            "::",
            stringify!(cltid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tpqctl_t>())).urcode as *const _ as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(tpqctl_t),
            "::",
            stringify!(urcode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tpqctl_t>())).appkey as *const _ as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(tpqctl_t),
            "::",
            stringify!(appkey)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tpqctl_t>())).delivery_qos as *const _ as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(tpqctl_t),
            "::",
            stringify!(delivery_qos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tpqctl_t>())).reply_qos as *const _ as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(tpqctl_t),
            "::",
            stringify!(reply_qos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tpqctl_t>())).exp_time as *const _ as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(tpqctl_t),
            "::",
            stringify!(exp_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tpqctl_t>())).block as *const _ as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(tpqctl_t),
            "::",
            stringify!(block)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tpqctl_t>())).DIP as *const _ as usize },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(tpqctl_t),
            "::",
            stringify!(DIP)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tpqctl_t>())).uma as *const _ as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(tpqctl_t),
            "::",
            stringify!(uma)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tpqctl_t>())).msg_class as *const _ as usize },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(tpqctl_t),
            "::",
            stringify!(msg_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tpqctl_t>())).msg_type as *const _ as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(tpqctl_t),
            "::",
            stringify!(msg_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tpqctl_t>())).status_block as *const _ as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(tpqctl_t),
            "::",
            stringify!(status_block)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tpqctl_t>())).redeliver_count as *const _ as usize },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(tpqctl_t),
            "::",
            stringify!(redeliver_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tpqctl_t>())).seq_number as *const _ as usize },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(tpqctl_t),
            "::",
            stringify!(seq_number)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tpqctl_t>())).timeout as *const _ as usize },
        560usize,
        concat!(
            "Offset of field: ",
            stringify!(tpqctl_t),
            "::",
            stringify!(timeout)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tpqctl_t>())).src_qspace as *const _ as usize },
        568usize,
        concat!(
            "Offset of field: ",
            stringify!(tpqctl_t),
            "::",
            stringify!(src_qspace)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tpqctl_t>())).src_qname as *const _ as usize },
        584usize,
        concat!(
            "Offset of field: ",
            stringify!(tpqctl_t),
            "::",
            stringify!(src_qname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tpqctl_t>())).tgt_qspace as *const _ as usize },
        712usize,
        concat!(
            "Offset of field: ",
            stringify!(tpqctl_t),
            "::",
            stringify!(tgt_qspace)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tpqctl_t>())).tgt_qname as *const _ as usize },
        728usize,
        concat!(
            "Offset of field: ",
            stringify!(tpqctl_t),
            "::",
            stringify!(tgt_qname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tpqctl_t>())).orig_src_qspace as *const _ as usize },
        856usize,
        concat!(
            "Offset of field: ",
            stringify!(tpqctl_t),
            "::",
            stringify!(orig_src_qspace)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tpqctl_t>())).orig_src_qname as *const _ as usize },
        872usize,
        concat!(
            "Offset of field: ",
            stringify!(tpqctl_t),
            "::",
            stringify!(orig_src_qname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tpqctl_t>())).orig_tgt_qspace as *const _ as usize },
        1000usize,
        concat!(
            "Offset of field: ",
            stringify!(tpqctl_t),
            "::",
            stringify!(orig_tgt_qspace)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tpqctl_t>())).orig_tgt_qname as *const _ as usize },
        1016usize,
        concat!(
            "Offset of field: ",
            stringify!(tpqctl_t),
            "::",
            stringify!(orig_tgt_qname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tpqctl_t>())).hops as *const _ as usize },
        1144usize,
        concat!(
            "Offset of field: ",
            stringify!(tpqctl_t),
            "::",
            stringify!(hops)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tpqctl_t>())).opcode as *const _ as usize },
        1152usize,
        concat!(
            "Offset of field: ",
            stringify!(tpqctl_t),
            "::",
            stringify!(opcode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tpqctl_t>())).filter_idx as *const _ as usize },
        1160usize,
        concat!(
            "Offset of field: ",
            stringify!(tpqctl_t),
            "::",
            stringify!(filter_idx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tpqctl_t>())).user_tag as *const _ as usize },
        1168usize,
        concat!(
            "Offset of field: ",
            stringify!(tpqctl_t),
            "::",
            stringify!(user_tag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tpqctl_t>())).geta_idx as *const _ as usize },
        1176usize,
        concat!(
            "Offset of field: ",
            stringify!(tpqctl_t),
            "::",
            stringify!(geta_idx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tpqctl_t>())).endian as *const _ as usize },
        1184usize,
        concat!(
            "Offset of field: ",
            stringify!(tpqctl_t),
            "::",
            stringify!(endian)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tpqctl_t>())).receipt_msg_type as *const _ as usize },
        1192usize,
        concat!(
            "Offset of field: ",
            stringify!(tpqctl_t),
            "::",
            stringify!(receipt_msg_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tpqctl_t>())).auxiliary as *const _ as usize },
        1200usize,
        concat!(
            "Offset of field: ",
            stringify!(tpqctl_t),
            "::",
            stringify!(auxiliary)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tpqctl_t>())).reserved as *const _ as usize },
        1328usize,
        concat!(
            "Offset of field: ",
            stringify!(tpqctl_t),
            "::",
            stringify!(reserved)
        )
    );
}
pub type TPQCTL = tpqctl_t;
extern "C" {
    pub fn tpenqueue(
        qspace: *mut ::std::os::raw::c_char,
        qname: *mut ::std::os::raw::c_char,
        ctl: *mut TPQCTL,
        data: *mut ::std::os::raw::c_char,
        len: ::std::os::raw::c_long,
        flags: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tpdequeue(
        qspace: *mut ::std::os::raw::c_char,
        qname: *mut ::std::os::raw::c_char,
        ctl: *mut TPQCTL,
        data: *mut *mut ::std::os::raw::c_char,
        len: *mut ::std::os::raw::c_long,
        flags: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tm {
    _unused: [u8; 0],
}
extern "C" {
    pub fn gp_mktime(arg1: *mut tm) -> ::std::os::raw::c_long;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tpevctl_t {
    pub flags: ::std::os::raw::c_long,
    pub name1: [::std::os::raw::c_char; 128usize],
    pub name2: [::std::os::raw::c_char; 128usize],
    pub qctl: TPQCTL,
    pub reserved: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_tpevctl_t() {
    assert_eq!(
        ::std::mem::size_of::<tpevctl_t>(),
        1608usize,
        concat!("Size of: ", stringify!(tpevctl_t))
    );
    assert_eq!(
        ::std::mem::align_of::<tpevctl_t>(),
        8usize,
        concat!("Alignment of ", stringify!(tpevctl_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tpevctl_t>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tpevctl_t),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tpevctl_t>())).name1 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tpevctl_t),
            "::",
            stringify!(name1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tpevctl_t>())).name2 as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(tpevctl_t),
            "::",
            stringify!(name2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tpevctl_t>())).qctl as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(tpevctl_t),
            "::",
            stringify!(qctl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tpevctl_t>())).reserved as *const _ as usize },
        1600usize,
        concat!(
            "Offset of field: ",
            stringify!(tpevctl_t),
            "::",
            stringify!(reserved)
        )
    );
}
pub type TPEVCTL = tpevctl_t;
extern "C" {
    pub fn tpsubscribe(
        eventexpr: *mut ::std::os::raw::c_char,
        filter: *mut ::std::os::raw::c_char,
        ctl: *mut TPEVCTL,
        flags: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn tpunsubscribe(
        subscription: ::std::os::raw::c_long,
        flags: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tppost(
        eventname: *mut ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_char,
        len: ::std::os::raw::c_long,
        flags: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tpkey_t {
    _unused: [u8; 0],
}
pub type TPKEY = *mut tpkey_t;
extern "C" {
    pub fn tpkey_open(
        arg1: *mut TPKEY,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
        arg4: *mut ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_long,
        arg6: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tpkey_close(arg1: TPKEY, arg2: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tpkey_getinfo(
        arg1: TPKEY,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut ::std::os::raw::c_long,
        arg5: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tpkey_setinfo(
        arg1: TPKEY,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_void,
        arg4: ::std::os::raw::c_long,
        arg5: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tpseal(
        arg1: *mut ::std::os::raw::c_char,
        arg2: TPKEY,
        arg3: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tpsign(
        arg1: *mut ::std::os::raw::c_char,
        arg2: TPKEY,
        arg3: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tpexport(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_long,
        arg3: *mut ::std::os::raw::c_char,
        arg4: *mut ::std::os::raw::c_long,
        arg5: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tpimport(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_long,
        arg3: *mut *mut ::std::os::raw::c_char,
        arg4: *mut ::std::os::raw::c_long,
        arg5: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tpenvelope(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_int,
        arg4: *mut TPKEY,
        arg5: *mut ::std::os::raw::c_long,
        arg6: *mut ::std::os::raw::c_char,
        arg7: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tmdsptchtbl_t {
    pub svcname: *mut ::std::os::raw::c_char,
    pub funcname: *mut ::std::os::raw::c_char,
    pub svcfunc: ::std::option::Option<unsafe extern "C" fn(arg1: *mut TPSVCINFO)>,
    pub index: TM32I,
    pub flag: ::std::os::raw::c_char,
    pub reserved: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_tmdsptchtbl_t() {
    assert_eq!(
        ::std::mem::size_of::<tmdsptchtbl_t>(),
        40usize,
        concat!("Size of: ", stringify!(tmdsptchtbl_t))
    );
    assert_eq!(
        ::std::mem::align_of::<tmdsptchtbl_t>(),
        8usize,
        concat!("Alignment of ", stringify!(tmdsptchtbl_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tmdsptchtbl_t>())).svcname as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tmdsptchtbl_t),
            "::",
            stringify!(svcname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tmdsptchtbl_t>())).funcname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tmdsptchtbl_t),
            "::",
            stringify!(funcname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tmdsptchtbl_t>())).svcfunc as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tmdsptchtbl_t),
            "::",
            stringify!(svcfunc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tmdsptchtbl_t>())).index as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tmdsptchtbl_t),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tmdsptchtbl_t>())).flag as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(tmdsptchtbl_t),
            "::",
            stringify!(flag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tmdsptchtbl_t>())).reserved as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tmdsptchtbl_t),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xa_switch_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tmsvrargs_t {
    pub xa_switch: *mut xa_switch_t,
    pub tmdsptchtbl: *mut tmdsptchtbl_t,
    pub flags: TM32U,
    pub initfunc: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: *mut *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub donefunc: ::std::option::Option<unsafe extern "C" fn()>,
    pub runsrvr: ::std::option::Option<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
    >,
    pub reserved1: ::std::option::Option<unsafe extern "C" fn()>,
    pub reserved2: ::std::option::Option<unsafe extern "C" fn()>,
    pub reserved3: ::std::option::Option<unsafe extern "C" fn()>,
    pub reserved4: ::std::option::Option<unsafe extern "C" fn()>,
    pub rminitfunc: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_char,
            arg2: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub thrinitfunc: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: *mut *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub thrdonefunc: ::std::option::Option<unsafe extern "C" fn()>,
    pub reserved: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_tmsvrargs_t() {
    assert_eq!(
        ::std::mem::size_of::<tmsvrargs_t>(),
        112usize,
        concat!("Size of: ", stringify!(tmsvrargs_t))
    );
    assert_eq!(
        ::std::mem::align_of::<tmsvrargs_t>(),
        8usize,
        concat!("Alignment of ", stringify!(tmsvrargs_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tmsvrargs_t>())).xa_switch as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tmsvrargs_t),
            "::",
            stringify!(xa_switch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tmsvrargs_t>())).tmdsptchtbl as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tmsvrargs_t),
            "::",
            stringify!(tmdsptchtbl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tmsvrargs_t>())).flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tmsvrargs_t),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tmsvrargs_t>())).initfunc as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tmsvrargs_t),
            "::",
            stringify!(initfunc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tmsvrargs_t>())).donefunc as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tmsvrargs_t),
            "::",
            stringify!(donefunc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tmsvrargs_t>())).runsrvr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(tmsvrargs_t),
            "::",
            stringify!(runsrvr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tmsvrargs_t>())).reserved1 as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(tmsvrargs_t),
            "::",
            stringify!(reserved1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tmsvrargs_t>())).reserved2 as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(tmsvrargs_t),
            "::",
            stringify!(reserved2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tmsvrargs_t>())).reserved3 as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(tmsvrargs_t),
            "::",
            stringify!(reserved3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tmsvrargs_t>())).reserved4 as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(tmsvrargs_t),
            "::",
            stringify!(reserved4)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tmsvrargs_t>())).rminitfunc as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(tmsvrargs_t),
            "::",
            stringify!(rminitfunc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tmsvrargs_t>())).thrinitfunc as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(tmsvrargs_t),
            "::",
            stringify!(thrinitfunc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tmsvrargs_t>())).thrdonefunc as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(tmsvrargs_t),
            "::",
            stringify!(thrdonefunc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tmsvrargs_t>())).reserved as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(tmsvrargs_t),
            "::",
            stringify!(reserved)
        )
    );
}
extern "C" {
    pub fn _tmsetup(
        argcp: *mut ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
        tmsvrargs: *mut tmsvrargs_t,
    );
}
extern "C" {
    pub fn _tmstartserver(
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
        tmsvrargs: *mut tmsvrargs_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _tmgetsvrargs() -> *mut tmsvrargs_t;
}
extern "C" {
    pub fn tpsblktime(
        blktime: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tpgblktime(flags: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tpgetrepos(
        reposfile: *mut ::std::os::raw::c_char,
        idata: *mut FBFR32,
        odata: *mut *mut FBFR32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tpsetrepos(
        reposfile: *mut ::std::os::raw::c_char,
        idata: *mut FBFR32,
        odata: *mut *mut FBFR32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tpgetcallinfo(
        msg: *mut ::std::os::raw::c_char,
        obuf: *mut *mut FBFR32,
        flags: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tpsetcallinfo(
        msg: *mut ::std::os::raw::c_char,
        ibuf: *mut FBFR32,
        flags: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tpappthrinit(arg1: *mut TPINIT) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tpappthrterm() -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tmrmargs_t {
    pub rmname: *mut ::std::os::raw::c_char,
    pub flags: TM32U,
    pub xa_switch: *mut xa_switch_t,
    pub reserved: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_tmrmargs_t() {
    assert_eq!(
        ::std::mem::size_of::<tmrmargs_t>(),
        32usize,
        concat!("Size of: ", stringify!(tmrmargs_t))
    );
    assert_eq!(
        ::std::mem::align_of::<tmrmargs_t>(),
        8usize,
        concat!("Alignment of ", stringify!(tmrmargs_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tmrmargs_t>())).rmname as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tmrmargs_t),
            "::",
            stringify!(rmname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tmrmargs_t>())).flags as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tmrmargs_t),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tmrmargs_t>())).xa_switch as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tmrmargs_t),
            "::",
            stringify!(xa_switch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tmrmargs_t>())).reserved as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tmrmargs_t),
            "::",
            stringify!(reserved)
        )
    );
}
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type TPRMID_T = ::std::os::raw::c_long;
extern "C" {
    pub fn tprmopen(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tprmclose(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tprmstart(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tprmend(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tdccache_t {
    _unused: [u8; 0],
}
pub type TCACHE = tdccache_t;
extern "C" {
    pub fn tpgetcache(conf: *const ::std::os::raw::c_char) -> *mut TCACHE;
}
extern "C" {
    pub fn tpcacheput(
        tc: *mut TCACHE,
        key: *mut ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_char,
        len: ::std::os::raw::c_long,
        flags: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tpcacheget(
        tc: *mut TCACHE,
        key: *mut ::std::os::raw::c_char,
        odata: *mut *mut ::std::os::raw::c_char,
        olen: *mut ::std::os::raw::c_long,
        flags: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tpcacheremove(
        tc: *mut TCACHE,
        key: *mut ::std::os::raw::c_char,
        flags: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tpcacheremoveall(
        tc: *mut TCACHE,
        flags: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tpcachemremove(
        tc: *mut TCACHE,
        keyarray: *mut *mut ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut h_userlog: [::std::os::raw::c_char; 41usize];
}
extern "C" {
    pub static mut proc_name: *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn userlog(arg1: *mut ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}

#[test]
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
